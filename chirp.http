@BASE_URL = HTTP://localhost:8080


### Validate Chirp

POST /api/validate_chirp HTTP/1.1
Content-Type: application/json
Host: {{BASE_URL}}

{
  "body": "I had something interesting for breakfast"
}

> {%
  let json = response.body;

  client.test('Check response', function () {
    assert.responseHas('responseCode', 200, 'Check response is 200');
    assert.true('cleaned_body' in json, 'Has .cleaned_body')
    assert.true(json.cleaned_body === 'I had something interesting for breakfast', 'Has .cleaned_body')
  })
%}

### Body with extra fields are ignored

POST /api/validate_chirp HTTP/1.1
Content-Type: application/json
Host: {{BASE_URL}}

{
  "body": "I hear Mastodon is better than Chirpy. sharbert I need to migrate",
  "extra": "this should be ignored"
}

> {%
  let json = response.body;

  client.test('Check response', function () {
    assert.responseHas('responseCode', 200, 'Check response is 200');
    assert.true('cleaned_body' in json, 'Has .cleaned_body')
    assert.true(json.cleaned_body === 'I hear Mastodon is better than Chirpy. **** I need to migrate', 'Has correct message')
  })
%}

### Validate sanitization "kerfuffle"

POST /api/validate_chirp HTTP/1.1
Content-Type: application/json
Host: {{BASE_URL}}

{
  "body": "I really need a kerfuffle to go to bed sooner, Fornax !"
}

> {%
  let json = response.body;

  client.test('Check response', function () {
    assert.responseHas('responseCode', 200, 'Check response is 200');
    assert.true('cleaned_body' in json, 'Has .cleaned_body')
    assert(json.cleaned_body === 'I really need a **** to go to bed sooner, **** !', 'Did sanitize kerfuffle')
  })
%}

### Test invalid Chirp - Too long

POST /api/validate_chirp HTTP/1.1
Content-Type: application/json
Host: {{BASE_URL}}

{
  "body": "Some long text that i need to make over 140 characters to trigger an invalid chirp length that should invalidate. We want to test the response has the correct response"
}

> {%
  let json = response.body;

  client.test('Check response', function () {
    assert.responseHas('responseCode', 400, 'Check response is 400');
    assert.true('error' in json, 'Response has error')
    assert.headersHas("Content-Type", "application/json", 'header has content-type application/json')
    assert(json.error === 'Chirp is too long', 'Check error message')
  })

%}

### Example invalid Chirp

POST /api/validate_chirp HTTP/1.1
Content-Type: application/json
Host: {{BASE_URL}}

{
  "body": "lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
}

> {%
  let json = response.body;

  client.test('Check response', function () {
    assert.responseHas('responseCode', 400, 'Check response is 400');
    assert.true('error' in json, 'Response has error')
    assert.headersHas("Content-Type", "application/json", 'header has content-type application/json')
    assert(json.error === 'Chirp is too long', 'Check error message')
  })

%}
