### Create Chirp

POST /api/chirps HTTP/1.1
Content-Type: application/json
Host: {{BASE_URL}}

{
  "body": "I had something interesting for breakfast",
  "user_id": "55df7a64-e562-4c6e-877a-b8d3afe118f2"
}

> {%
   let json = response.body;
   
   client.test('Check response', function () {
   assert.responseHas('responseCode', 201, 'Check response is 201');
   assert.true('id' in json, 'Has .id')
   assert.true('created_at' in json, 'Has .created_at')
   assert.true('updated_at' in json, 'Has .updated_at')
   assert.true('body' in json, 'Has .body')
   assert.true('user_id' in json, 'Has .user_id')
   assert.true(json.body === 'I had something interesting for breakfast', 'Body matches expected')
   })
%}


### VALIDATE_SANITIZATION_KERFUFFLE

POST /api/chirps HTTP/1.1
Content-Type: application/json
Host: {{BASE_URL}}

{
  "body": "I really need a kerfuffle to go to bed sooner, Fornax !",
  "user_id": "a7916e5d-89f6-4178-aeff-379179b35484"
}

> {%
   let json = response.body;
   
   client.test('Check response', function () {
   assert.responseHas('responseCode', 201, 'Check response is 201');
   assert.true('id' in json, 'Has .id')
   assert.true('created_at' in json, 'Has .created_at')
   assert.true('updated_at' in json, 'Has .updated_at')
   assert.true('body' in json, 'Has .body')
   assert.true('user_id' in json, 'Has .user_id')
   assert(json.body === 'I really need a **** to go to bed sooner, **** !', 'Did sanitize kerfuffle')
   })
%}


### Get chirp by id

GET /api/chirps/{{VALIDATE_SANITIZATION_KERFUFFLE.response.body.id}} HTTP/1.1
Content-Type: application/json
Host: {{BASE_URL}}

> {%
   
   let json = response.body;
   
   client.test('Check response', function () {
   assert.responseHas('responseCode', 200, 'Check response is 200');
   // assert.true(Array.IsArray(json), 'Response is array')
   assert.headersHas("Content-Type", "application/json", 'header has content-type application/json')
   })
%}


### Get chirp by id - expect 404 (random uuid)

GET /api/chirps/{{$uuid}} HTTP/1.1
Content-Type: application/json
Host: {{BASE_URL}}

> {%
   
   let json = response.body;
   
   client.test('Check response', function () {
   assert.responseHas('responseCode', 404, 'Check response is 404');
   assert.headersHas("Content-Type", "application/json", 'header has content-type application/json')
   })
%}


### Test invalid Chirp - Too long

POST /api/chirps HTTP/1.1
Content-Type: application/json
Host: {{BASE_URL}}

{
  "body": "Some long text that i need to make over 140 characters to trigger an invalid chirp length that should invalidate. We want to test the response has the correct response",
  "user_id": "fcc8e47d-4ce5-4c59-a977-d7849ea78efc"
}

> {%
   let json = response.body;
   
   client.test('Check response', function () {
   assert.responseHas('responseCode', 400, 'Check response is 400');
   assert.true('error' in json, 'Response has error')
   assert.headersHas("Content-Type", "application/json", 'header has content-type application/json')
   assert(json.error === 'Chirp is too long', 'Check error message')
   })
   
%}


### Get all chirps

GET /api/chirps HTTP/1.1
Content-Type: application/json
Host: {{BASE_URL}}

> {%
   
   let json = response.body;
   
   client.test('Check response', function () {
   assert.responseHas('responseCode', 200, 'Check response is 200');
   // assert.true(Array.IsArray(json), 'Response is array')
   assert.headersHas("Content-Type", "application/json", 'header has content-type application/json')
   })
%}
